#+TITLE: doom-literate-config
#+DESCRIPTION: Doom Emacs literate config.
#+LANGUAGE: en
#+TAGS: package(p) advice(a) disabled(d) hook(h) bind(b) setq(s) noexport(x) popup(u) hack(H)
#+TODO: TODO
#+OPTIONS: tags:t tasks:t todo:t inline:t num:nil toc:nil html-style:nil
#+STARTUP: indent hidestars
#+PROPERTY: header-args:emacs-lisp :tangle ~/.doom.d/config.el :tangle-mode (identity #o400) :results silent :exports code :lexical yes :mkdirp no
#+HTML_HEAD: <link rel="preload" href="Zenburn.woff2" as="font" type="font/woff2" />
#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="config.css" />
#+EXPORT_FILE_NAME: index.html
#+LINK_HOME: https://gruner.lu/kasz/

* =*DOOM*=
** Add file headers
*** for =config.el=
#+BEGIN_SRC emacs-lisp
;;; ~/.doom.d/config.el -*- lexical-binding: t; -*-
#+END_SRC
*** and =packages.el=
#+BEGIN_SRC emacs-lisp :tangle ~/.doom.d/packages.el
;;; ~/.doom.d/packages.el -*- no-byte-compile: t; lexical-binding: t; -*-
(package! org-ql
  :recipe (:host github
           :repo "alphapapa/org-ql"
           :files (:defaults (:exclude "helm-org-ql.el"))))
#+END_SRC
*** load or create =custom.el=                                          :setq:
#+BEGIN_SRC emacs-lisp
(setq! custom-file (expand-file-name "custom.el" doom-private-dir))
(if (file-exists-p custom-file)
    (load custom-file)
  (with-temp-file custom-file
    (insert ";;; ~/.doom.d/custom.el -*- no-byte-compile: t; lexical-binding: t; -*-\n")))
#+END_SRC
*** ask about unsaved customizations
#+BEGIN_SRC emacs-lisp
(add-hook! 'kill-emacs-query-functions #'custom-save-all)
#+END_SRC
** Modules configuration (init.el)
#+BEGIN_SRC emacs-lisp :tangle ~/.doom.d/init.el
;;; ~/.doom.d/init.el -*- lexical-binding: t; -*-
(doom! :completion (company +tng) (vertico +icons)
       :ui         doom doom-dashboard doom-quit
                   hl-todo modeline nav-flash ophints treemacs
                   (popup +all +defaults) vc-gutter vi-tilde-fringe workspaces
       :editor     (evil +everywhere) file-templates fold format snippets word-wrap
       :emacs      (dired +icons) (ibuffer +icons) undo vc
       :term       vterm
       :checkers   syntax
       :tools      ansible debugger (docker +lsp) (eval +overlay)
                   (lookup +docsets) (lsp +peek) magit make prodigy upload
       :os         tty
       :lang       (cc +lsp) data emacs-lisp (go +lsp) (java +lsp)
                   (javascript +lsp) (json +lsp) lua markdown org (python +lsp)
                   rest (sh +fish +lsp) (web +lsp) (yaml +lsp)
       :config     literate (default +bindings))
#+END_SRC
** *HACKS*
*** fix defvaralias eldoc-documentation-function                   :setq:hack:
conflict between eldoc version from emacs28 (installed by doom) and emacs version 27.1
take note that doom-emacs doesn't yet support emacs version 28
#+BEGIN_SRC emacs-lisp
(defvar eldoc-documentation-strategy 'eldoc-documentation-default "Now defvaralias won't fail.")
#+END_SRC
** My LIB
*** Locally remap q to exit buffer
Some modes don't require macros (like most RO buffers).
#+BEGIN_SRC emacs-lisp
(defun uki/local-remap-q-kills-buffer ()
  (define-key evil-normal-state-local-map (kbd "q") #'kill-current-buffer))
#+END_SRC
* Minor-modes
** =Builtin= and one-liners
*** Personal info                                                       :setq:
#+BEGIN_SRC emacs-lisp
(setq! user-full-name    "Łukasz Gruner"
       user-mail-address "lukasz@gruner.lu")
#+END_SRC
*** Set theme & font                                            :package:setq:
~doom-zenburn-theme~ is installed by =:ui doom=
#+BEGIN_SRC emacs-lisp
(setq! doom-theme               'doom-zenburn
       doom-variable-pitch-font "DejaVu Sans:size=12"
       doom-font                "Terminus:size=16"
       doom-big-font            "Terminus:size=22")
#+END_SRC
*** Start maximized
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(fullscreen . maximized))
(add-to-list 'initial-frame-alist '(fullscreen . maximized))
#+END_SRC
*** Define const vars                                                   :setq:
#+BEGIN_SRC emacs-lisp
(defconst uki/dotfiles-dir "~/src/dot/" "Dotfiles repository root.")

(defconst uki/ellipsis "…" "Ellipsis.")
#+END_SRC
*** Authinfo file                                                       :setq:
#+BEGIN_SRC emacs-lisp
(after! auth-source
  (setq! auth-sources (list (concat uki/dotfiles-dir "hidden/authinfo.gpg"))))
#+END_SRC
*** If '.elc' file is outdated load an uncompiled '.el' file instead    :setq:
#+BEGIN_SRC emacs-lisp
(setq! load-prefer-newer t)
#+END_SRC
*** Make scripts executable on save                                     :hook:
#+BEGIN_SRC emacs-lisp
(add-hook 'after-save-hook
          #'executable-make-buffer-file-executable-if-script-p)
#+END_SRC
*** *<mouse-1>* should follow links                                     :setq:
#+BEGIN_SRC emacs-lisp
(setq! mouse-1-click-follows-link t)
#+END_SRC
*** Enable ~+global-word-wrap-mode~
#+BEGIN_SRC emacs-lisp
(after! (:and simple adaptive-wrap)
  (+global-word-wrap-mode +1))
#+END_SRC
*** Only highlight trailing whitespace when coding                 :hook:setq:
#+BEGIN_SRC emacs-lisp
(add-hook! '(prog-mode-hook org-mode-hook)
  (defun uki/set-whitespace-style-to-trailing-space-h ()
    "Set local value for `whitespace-style'."
    (setq-local whitespace-style '(face trailing))))
#+END_SRC
** Persp
*** Kill buffers removed from workspace and empty workspaces            :setq:
#+BEGIN_SRC emacs-lisp
(after! persp-mode
  (setq! persp-autokill-buffer-on-remove 'kill
         persp-autokill-persp-when-removed-last-buffer 'kill))
#+END_SRC
** Hl-Todo
*** Setup colors/faces                                                  :setq:
#+BEGIN_SRC emacs-lisp
(after! hl-todo
  (setq! hl-todo-keyword-faces `(("TODO" font-lock-warning-face bold)
                                 ("FIXME" error bold)
                                 ("HACK" font-lock-keyword-face bold)
                                 ("XXX" font-lock-doc-face bold))))
#+END_SRC
*** Highlight background                                                :setq:
#+BEGIN_SRC emacs-lisp
(after! hl-todo
  (setq! hl-todo-color-background t))
#+END_SRC
** Electric-Pair
*** Be conservative                                                     :setq:
#+BEGIN_SRC emacs-lisp
(after! elec-pair
  (setq! electric-pair-inhibit-predicate #'electric-pair-conservative-inhibit))
#+END_SRC
*** Run in prog-mode derivatives                                        :hook:
#+BEGIN_SRC emacs-lisp
(declare-function electric-pair-local-mode "elec-pair" (&optional arg))
(after! elec-pair
  (add-hook 'prog-mode-hook #'electric-pair-local-mode))
#+END_SRC
*** Define pairs                                                        :hook:
#+BEGIN_SRC emacs-lisp
(declare-function electric-pair-local-mode "elec-pair" (&optional arg))
(after! elec-pair
  (setq! electric-pair-text-pairs `((?\" . ?\"))
         electric-pair-pairs `((?\" . ?\"))))
#+END_SRC
** Doom-Modeline
*** Use icons in graphic mode                                           :setq:
#+BEGIN_SRC emacs-lisp
(after! doom-modeline
  (let ((graphic-p (display-graphic-p)))
    (setq! doom-modeline-height 22
           doom-modeline-unicode-fallback t
           doom-modeline-icon graphic-p
           doom-modeline-major-mode-icon graphic-p
           doom-modeline-major-mode-color-icon graphic-p
           doom-modeline-buffer-state-icon graphic-p
           doom-modeline-buffer-modification-icon graphic-p
           doom-modeline-modal-icon graphic-p)))
#+END_SRC
*** Don't upscale icon font                                             :setq:
#+BEGIN_SRC emacs-lisp
(after! all-the-icons
  (setq! all-the-icons-scale-factor 1.0))
#+END_SRC
*** Truncate ~buffer-file-name~ up to project                           :setq:
#+BEGIN_SRC emacs-lisp
(after! doom-modeline
  (setq! doom-modeline-buffer-file-name-style 'truncate-upto-project))
#+END_SRC
** Evil
*** <C-w M-(direction)> Swap buffers by direction                       :bind:
#+BEGIN_SRC emacs-lisp
(defmacro uki/window-swap-action (cmd)
  "Return defun which invokes `CMD' to switch window and than swaps buffer with previous window."
  (let ((func-sym (intern (format "uki/swap-buffers-using--%s" cmd))))
    (if (functionp func-sym)
        `(quote ,func-sym)
      `(defun ,func-sym (&optional count)
         ,(format "Invoke `%s' and swap buffer with window it selects."
                  (upcase (symbol-name cmd)))
         (interactive "p")
         (let ((start-buffer (current-buffer))
               (start-point  (point))
               (start-window (selected-window)))
           (funcall #',cmd (max 1 (or count 0)))
           (set-window-buffer start-window (current-buffer))
           (set-window-buffer (selected-window) start-buffer)
           (goto-char start-point))))))

(map! :after evil :map evil-window-map
      "M-k"       (uki/window-swap-action evil-window-up)
      "<M-up>"    (uki/window-swap-action evil-window-up)
      "M-j"       (uki/window-swap-action evil-window-down)
      "<M-down>"  (uki/window-swap-action evil-window-down)
      "M-l"       (uki/window-swap-action evil-window-right)
      "<M-right>" (uki/window-swap-action evil-window-right)
      "M-h"       (uki/window-swap-action evil-window-left)
      "<M-left>"  (uki/window-swap-action evil-window-left))
#+END_SRC
*** Always use windows <C-w> bindings                                   :setq:
#+BEGIN_SRC emacs-lisp
(after! evil
  (setq! evil-want-C-w-in-emacs-state t))
#+END_SRC
*** Also use arrows for switching windows                               :bind:
#+BEGIN_SRC emacs-lisp
(map! :after evil :map evil-window-map
      "<left>"  #'evil-window-left
      "<right>" #'evil-window-right
      "<up>"    #'evil-window-up
      "<down>"  #'evil-window-down)
#+END_SRC
* Major-modes
** Messages-Buffer
*** <q> exits buffer/window
#+BEGIN_SRC emacs-lisp
(add-hook 'messages-buffer-mode-hook #'uki/local-remap-q-kills-buffer)
#+END_SRC
** Prog
*** <C-x =>/<SPC c => Align your code in a pretty way                   :bind:
#+BEGIN_SRC emacs-lisp
(map! :map prog-mode-map
      "C-x =" #'align-regexp
      (:leader :prefix ("c" "+code")
        :desc "Align regexp" "=" #'align-regexp))
#+END_SRC
*** Highlight trailing whitespace                                  :hook:setq:
#+BEGIN_SRC emacs-lisp
(add-hook! 'prog-mode-hook (defun uki/set-trailing-whitespace-h ()
                             "Set `show-trailing-whitespace'."
                             (setq! show-trailing-whitespace t)))
#+END_SRC
** Dired
*** Reuse current dired buffer when changing directories                :bind:
#+BEGIN_SRC emacs-lisp
(defun uki/up-directory-alternative ()
  "Use single instance of dired buffer when going up a directory."
  (interactive)
  (set-buffer-modified-p nil) ;; don't need to save dired buffers
  (find-alternate-file ".."))

(defun uki/find-alt-file-for-directories ()
  "Use single instance of dired buffer when opening files."
  (interactive)
  (let ((file (dired-get-file-for-visit)))
    (if (file-directory-p file)
        (progn
          (set-buffer-modified-p nil) ;; don't need to save dired buffers
          (find-alternate-file file))
      (find-file file))))

(map! :after dired :map dired-mode-map
      [remap dired-find-file]    #'uki/find-alt-file-for-directories
      [remap dired-up-directory] #'uki/up-directory-alternative)
#+END_SRC
*** Permanent ~dired-hide-details-mode~                                 :bind:
#+BEGIN_SRC emacs-lisp
(defun uki/init-permanent-dired-hide-details-mode (sym exp)
  "Restore saved mode state or set a new value."
  (custom-initialize-reset sym exp)
  (when (eq major-mode 'dired-mode) (dired-hide-details-mode exp))
  (if exp
      (add-hook 'dired-mode-hook #'dired-hide-details-mode)
    (remove-hook 'dired-mode-hook #'dired-hide-details-mode)))

(defcustom uki/permanent-dired-hide-details-mode-state nil
  "State of `dired-hide-details-mode' saved between restarts."
  :group 'user
  :type 'bool
  :initialize #'uki/init-permanent-dired-hide-details-mode)

(defun uki/toggle-permanent-dired-hide-details-mode ()
  "Toggles `dired-hide-details-mode' for current and future dired buffers."
  (interactive)
  (uki/init-permanent-dired-hide-details-mode
   'uki/permanent-dired-hide-details-mode-state
   (not uki/permanent-dired-hide-details-mode-state)))

(map! :after dired :map dired-mode-map
      (:localleader :desc "Hide-Details" "d" #'uki/toggle-permanent-dired-hide-details-mode)
      ([remap dired-hide-details-mode] #'uki/toggle-permanent-dired-hide-details-mode))
#+END_SRC
*** Run dired instead of listing directory
Why so complicated? [[https://nullprogram.com/blog/2019/12/10/#cl-first]]
#+BEGIN_SRC emacs-lisp
(after! dired
  (defalias 'list-directory 'dired)
  (put 'list-directory 'byte-optimizer 'byte-compile-inline-expand))
#+END_SRC
** Org
*** Startup options                                                     :setq:
#+BEGIN_SRC emacs-lisp
(after! org
  (setq! org-tags-column -80
         org-startup-indented t
         org-startup-folded t
         org-startup-truncated t
         org-startup-align-all-tables t))
#+END_SRC
*** My ~org-directory~                                                  :setq:
#+BEGIN_SRC emacs-lisp
(setq! org-directory "~/org/")
#+END_SRC
*** Bind ~org-babel-tangle~ under :localleader                          :bind:
#+BEGIN_SRC emacs-lisp
(map! :after org :map org-mode-map
      :localleader :desc "Tangle current file" "B" #'org-babel-tangle)
#+END_SRC
*** Follow link under point with <RET>                                  :setq:
#+BEGIN_SRC emacs-lisp
(after! org
  (setq! org-return-follows-link t))
#+END_SRC
*** Publishing                                                          :setq:
#+BEGIN_SRC emacs-lisp
(after! ox-publish
  (let* ((root-dir "/davs:ukaszg@fastmail.fm@myfiles.fastmail.com:/www/")
         (conf-dir (concat root-dir "config/"))
         (doompath (expand-file-name "hidden/doom.d/" uki/dotfiles-dir)))
    (setq! org-publish-project-alist
           `(("gruner.lu/kasz/config" :components ("config-static-resources" "config/index.html"))
             ("config-static-resources"
              :base-directory ,doompath
              :publishing-directory ,conf-dir
              :publishing-function org-publish-attachment
              :include ("favicon.ico" "config.css" "Droid_Sans_Mono.woff2")
              :exclude ".*")
             ("config/index.html"
              :base-directory ,doompath
              :include ("config.org")
              :exclude ".*"
              :publishing-directory ,conf-dir
              :html-postamble nil
              :publishing-function org-html-publish-to-html
              :keywords "config.org, doom-literate-config, init.el"
              :html-doctype "html5"
              :html-html5-fancy t)))))
#+END_SRC
*** [Flycheck] Disable textlint checker                            :hook:setq:
#+BEGIN_SRC emacs-lisp
(after! org
  (add-hook! 'org-mode-hook
    (cl-pushnew 'textlint flycheck-disabled-checkers)))
#+END_SRC
*** Have export dialog open in place and without modeline              :popup:
#+BEGIN_SRC emacs-lisp
(after! org
  (require 'ox nil t)
  (set-popup-rule! "^ ?\\*Org Export Dispatcher"
    :actions '(display-buffer-same-window)
    :modeline nil))
#+END_SRC
*** Have =org-src= buffers be managed by orgmode                  :setq:popup:
#+BEGIN_SRC emacs-lisp
(after! org
  (setq! org-src-window-setup 'current-window)
  (set-popup-rule! "^\\*Org Src"
    :actions '(display-buffer-same-window)
    :quit nil :select t :autosave t :modeline nil :ttl nil))
#+END_SRC
*** Enable and fix =org-eldoc=                                   :advice:hook:
DOOM doesn't use stock Eldoc which causes =org-eldoc= to assume
Emacs is version 28 (with more recent emacs-lisp-mode).
So I bind old documentation function to new handles.
#+BEGIN_SRC emacs-lisp
(unless (<= 28 emacs-major-version)
  (after! org
    (require 'org-eldoc nil t)
    (add-hook! '(org-mode-hook)
               :append
               (defun uki/enable-org-eldoc-h (&rest _)
                 "Setup `eldoc-documentation-function' and enable `org-eldoc-mode'."
                 (interactive)
                 (setq-local eldoc-documentation-strategy 'eldoc-documentation-default)
                 (add-function :before-until (local 'eldoc-documentation-function)
                               #'org-eldoc-documentation-function)
                 (puthash "org"
                          #'org-eldoc-documentation-function
                          org-eldoc-local-functions-cache)
                 (eldoc-mode +1)))))
#+END_SRC
** Info
*** Automatically view '.info' files instead of editing them            :setq:
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist
             (cons "\\.[iI][nN][fF][oO]\\'"
                   (defun uki/reopen-file-in-info-mode-h ()
                     "Run this in an info viewer."
                     (interactive)
                     (let ((file-name (buffer-file-name)))
                       (kill-buffer)
                       (info file-name)))))
#+END_SRC
*** Display =*info*= buffers in same window                            :popup:
and disable the modeline.
#+BEGIN_SRC emacs-lisp
(set-popup-rule! "^\\*info\\*$"
  :actions '(display-buffer-same-window)
  :modeline nil)
#+END_SRC
*** Left mouse button should follow links                               :bind:
#+BEGIN_SRC emacs-lisp
(map! :after info :map Info-mode-map
      "<mouse-1>" #'Info-mouse-follow-nearest-node)
#+END_SRC
** Emacs-Lisp
*** Eldoc will show 1st line of function documentation                :advice:
#+BEGIN_SRC emacs-lisp
(declare-function helpful--docstring "helpful" (sym callable-p))

(defadvice! uki/eldoc-elisp-add-fundoc-a (orig-fn sym &optional index prefix)
  "Add a 1st line of docstring to ElDoc's function information."
  :around #'elisp-get-fnsym-args-string
  (require 'helpful)
  (let ((orig (funcall orig-fn sym index prefix))
        (doc  (condition-case nil
                  (replace-regexp-in-string "[\t \n\r]+"
                                            " "
                                            (substitute-command-keys
                                             (helpful--docstring sym t))
                                            t
                                            t)
                (error ""))))
    (if (s-blank? doc)
        orig
      (s-truncate
       (- (frame-width) (length orig) 1)
       (concat orig " " (propertize doc 'face 'font-lock-doc-face))
       (concat "[" uki/ellipsis "]")))))
#+END_SRC
*** [Flycheck] Disable elisp-checkdoc                              :hook:setq:
#+BEGIN_SRC emacs-lisp
(after! flycheck
  (add-hook! 'emacs-lisp-mode-hook
    (cl-pushnew 'emacs-lisp-checkdoc flycheck-disabled-checkers)))
#+END_SRC
** Java
*** Set ~compile-command~ to maven                                 :hook:setq:
#+BEGIN_SRC emacs-lisp
(add-hook! 'java-mode-hook
  (defun uki/set-mvn-cc ()
    (setq-local compile-command "mvn clean install -DskipTests")))
#+END_SRC
*** Use long lines                                                 :hook:setq:
#+BEGIN_SRC emacs-lisp
(setq-hook! 'java-mode-hook
  fill-column 160)
#+END_SRC
*** Load formatter configuration if present
#+BEGIN_SRC emacs-lisp
(after! lsp-java
  (let ((formatter (expand-file-name "~/.formatter.xml")))
    (when (file-exists-p formatter)
      (setq! lsp-java-format-enabled t
             lsp-java-format-settings-url formatter))))
#+END_SRC
*** Always use code blocks
#+BEGIN_SRC emacs-lisp
(after! lsp-java
  (setq! lsp-java-code-generation-use-blocks t))
#+END_SRC
*** LSP vm args
#+BEGIN_SRC emacs-lisp
(after! lsp-java
  (setq! lsp-java-vmargs
         '("-noverify -XX:UseParallelGC" "-XX:GCTimeRatio=4" "-XX:AdaptiveSizePolicyWeight=90"
           "-Dsun.zip.disableMemoryMapping=true" "-Xmx4G" "-Xms256m" "-XX:+UseStringDeduplication")))
#+END_SRC
*** LSP java executable
#+BEGIN_SRC emacs-lisp
(after! lsp-java
  (setq! lsp-java-java-path (executable-find "javaw.exe")))
#+END_SRC
** Compilation
*** Have <q> exit window                                           :hook:bind:
#+BEGIN_SRC emacs-lisp
(add-hook! 'compilation-mode-hook #'uki/local-remap-q-kills-buffer)
#+END_SRC
** Special
*** Have <q> exit window                                           :hook:bind:
#+BEGIN_SRC emacs-lisp
(add-hook! 'special-mode-hook #'uki/local-remap-q-kills-buffer)
#+END_SRC
** Comint
*** Have <q> exit window                                           :hook:bind:
#+BEGIN_SRC emacs-lisp
(add-hook! 'comint-mode-hook #'uki/local-remap-q-kills-buffer)
#+END_SRC
* Auto tangle & compile
My =~/.doom.d/config.org= is a softlink, so depending on if I open a symlink or
concrete file, ~+literate-enable-recompile-h~ might not recognize it as literate config.

As a workaround I disable literate autotangle.
#+BEGIN_SRC emacs-lisp
(after! org
  (remove-hook 'org-mode-hook #'+literate-enable-recompile-h))
#+END_SRC

And then add following at the end of =config.org= (will also [re]compile tangled files).
: # Local Variables:
: # eval: (add-hook 'after-save-hook (lambda () (org-babel-tangle) (byte-recompile-directory doom-private-dir 0 t)) nil t)
: # End:
