#+TITLE: doom-literate-config
#+DESCRIPTION: Doom Emacs literate config.
#+LANGUAGE: en
#+TAGS: package(p) advice(a) disabled(d) hook(h) bind(b) setq(s) noexport(x) popup(u) hack(H)
#+TODO: TODO
#+OPTIONS: tags:t tasks:t todo:t inline:t num:nil toc:nil
#+OPTIONS: html5-fancy:t html-postamble:nil html-preamble:nil html-scripts:nil html-style:nil
#+STARTUP: indent hidestars
#+HTML_DOCTYPE: html5
#+HTML_HEAD: <link rel="preload" href="Zenburn.woff2" as="font" type="font/woff2" />
#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="config.css" />
#+PROPERTY: header-args:emacs-lisp :tangle ~/.doom.d/config.el :tangle-mode (identity #o400) :results silent :exports code :lexical yes :mkdirp no
#+EXPORT_FILE_NAME: index.html
#+LINK_HOME: https://gruner.lu/kasz/

* =*DOOM*=
** Add file headers
*** for =config.el=
#+begin_src emacs-lisp
;;; ~/.doom.d/config.el -*- lexical-binding: t; -*-
#+end_src
*** and =packages.el=
#+begin_src emacs-lisp :tangle ~/.doom.d/packages.el
;;; ~/.doom.d/packages.el -*- no-byte-compile: t; lexical-binding: t; -*-
#+end_src
*** load or create =custom.el=                                          :setq:
#+begin_src emacs-lisp
(setq! custom-file (expand-file-name "custom.el" doom-private-dir))
(if (file-exists-p custom-file)
    (load custom-file)
  (with-temp-file custom-file
    (insert ";;; ~/.doom.d/custom.el -*- no-byte-compile: t; lexical-binding: t; -*-\n")))
#+end_src
*** ask about unsaved customizations
#+begin_src emacs-lisp
(add-hook! 'kill-emacs-query-functions #'custom-save-all)
#+end_src
** Modules configuration (init.el)
#+begin_src emacs-lisp :tangle ~/.doom.d/init.el
;;; ~/.doom.d/init.el -*- lexical-binding: t; -*-
(doom! :completion (company -tng) (vertico +icons)
       :ui         doom doom-quit hl-todo (modeline +light)
                   nav-flash ophints (treemacs +lsp)
                   (popup +all +defaults) vc-gutter vi-tilde-fringe
       :editor     (evil +everywhere) file-templates fold
                   format snippets word-wrap
       :emacs      (dired +icons) electric (ibuffer +icons) undo vc
       :term       vterm
       :checkers   syntax
       :tools      (ansible +lsp) (debugger +lsp) (docker +lsp)
                   (eval +overlay) lookup (lsp +peek) magit make
       :os         tty
       :lang       (cc +lsp) data emacs-lisp (go +lsp)
                   (java +lsp) (javascript +lsp) (json +lsp)
                   lua markdown org (python +lsp) rest
                   (sh +fish -lsp) (web +lsp) (yaml -lsp)
       :config     literate (default +bindings +smartparens))
#+end_src
** My Library of useful stuff
*** Locally remap q to exit buffer
Some modes don't require macros (like most RO buffers).
#+begin_src emacs-lisp
(defun uki/local-remap-q-kills-buffer-h ()
  (define-key evil-normal-state-local-map (kbd "q") #'quit-window)
  (define-key evil-visual-state-local-map (kbd "q") #'quit-window))
#+end_src
*** Simple-httpd                                                     :package:
#+begin_src emacs-lisp :tangle ~/.doom.d/packages.el
(package! simple-httpd)
#+end_src
*** Paste from WSL clipboard
#+begin_src emacs-lisp
(defun uki/wsl-paste ()
  "Paste using Windows' clipboard."
  (interactive)
  (let ((text (shell-command-to-string "winclip.sh")))
    ;; fix newlines
    (setq text (replace-regexp-in-string "\r" "" text))
    ;; powershell adds an extra newline
    (setq text (substring text 0 -1))
    (insert text)))
#+end_src
* Minor-modes
** =Builtin= and one-liners
*** Personal info                                                       :setq:
#+begin_src emacs-lisp
(setq! user-full-name    "Łukasz Gruner"
       user-mail-address "lukasz@gruner.lu")
#+end_src
*** Set theme & font                                            :package:setq:
~doom-zenburn-theme~ is installed by =:ui doom=
#+begin_src emacs-lisp
(setq! doom-theme               'doom-zenburn
       doom-variable-pitch-font "DejaVu Sans:size=12"
       doom-font                "Terminus:size=18"
       doom-big-font            "Terminus:size=24")
#+end_src
*** Start maximized
#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(fullscreen . maximized))
(add-to-list 'initial-frame-alist '(fullscreen . maximized))
#+end_src
*** Define const vars                                                   :setq:
#+begin_src emacs-lisp
(defconst uki/dotfiles-dir "~/src/dot/" "Dotfiles repository root.")

(defconst uki/ellipsis "…" "Ellipsis.")
#+end_src
*** Authinfo
**** file location                                                     :setq:
#+begin_src emacs-lisp
(setq! auth-sources (list (expand-file-name "hidden/authinfo.gpg" uki/dotfiles-dir)))
#+end_src
*** If '.elc' file is outdated load an uncompiled '.el' file instead    :setq:
#+begin_src emacs-lisp
(setq! load-prefer-newer t)
#+end_src
*** Make scripts executable on save                                     :hook:
#+begin_src emacs-lisp
(add-hook! 'after-save-hook
          #'executable-make-buffer-file-executable-if-script-p)
#+end_src
*** *<mouse-1>* should follow links                                     :setq:
#+begin_src emacs-lisp
(setq! mouse-1-click-follows-link t)
#+end_src
*** Enable ~+global-word-wrap-mode~
#+begin_src emacs-lisp
(after! (:and simple adaptive-wrap)
  (+global-word-wrap-mode +1))
#+end_src
*** Only highlight trailing whitespace when coding                 :hook:setq:
#+begin_src emacs-lisp
(add-hook! '(prog-mode-hook org-mode-hook)
  (defun uki/set-whitespace-style-to-trailing-space-h ()
    "Set local value for `whitespace-style'."
    (setq-local whitespace-style '(face trailing))))
#+end_src
** Consult
*** Buffer list filtering
#+begin_src emacs-lisp
(after! consult
  (setq! consult-buffer-filter `(,@consult-buffer-filter
                                 "\\`\\*Compile\\-Log\\*\\'"
                                 "\\`\\*scratch\\*\\'"
                                 "\\`\\*Messages\\*\\'"
                                 "\\`\\*helpful .*\\*\\'")))
#+end_src
** Hl-Todo
*** Highlight background                                                :setq:
#+begin_src emacs-lisp
(after! hl-todo
  (setq! hl-todo-color-background t))
#+end_src
** Doom-Modeline
*** Don't upscale icon font                                    :disabled:setq:
#+begin_src emacs-lisp :tangle no
(after! all-the-icons
  (setq! all-the-icons-scale-factor 1.0))
#+end_src
** Evil
*** Always use windows <C-w> bindings                                   :setq:
#+begin_src emacs-lisp
(setq! evil-want-C-w-in-emacs-state t)
#+end_src
*** Also use arrows for switching windows                               :bind:
#+begin_src emacs-lisp
(map! :after evil :map evil-window-map
      "<left>"  #'evil-window-left
      "<right>" #'evil-window-right
      "<up>"    #'evil-window-up
      "<down>"  #'evil-window-down)
#+end_src
** Flycheck
*** Always disable textlint
#+begin_src emacs-lisp
(add-hook! '(org-mode-hook text-mode-hook prog-mode-hook)
  (defun uki/flycheck-disable-textlint-h ()
    (cl-pushnew 'textlint flycheck-disabled-checkers)))
#+end_src
* Major-modes
** Messages
*** <q> exits buffer/window
Messages buffer already exists so hook won't get called until it gets restarted. We need to modify bindings manually.
#+begin_src emacs-lisp
(add-hook! 'messages-buffer-mode-hook #'uki/local-remap-q-kills-buffer-h)
(with-current-buffer "*Messages*" (uki/local-remap-q-kills-buffer-h))
#+end_src
** Prog
*** <C-x =>/<SPC c => Align your code in a pretty way                   :bind:
#+begin_src emacs-lisp
(map! :map prog-mode-map
      "C-x =" #'align-regexp
      (:leader :prefix ("c" "+code")
        :desc "Align regexp" "=" #'align-regexp))
#+end_src
*** Highlight trailing whitespace                                  :hook:setq:
#+begin_src emacs-lisp
(setq-hook! 'prog-mode-hook
  show-trailing-whitespace t)
#+end_src
** Dired
*** Reuse current dired buffer when changing directories                :bind:
#+begin_src emacs-lisp
(defun uki/dired-up-directory ()
  "Use single instance of dired buffer when going up a directory."
  (interactive)
  (set-buffer-modified-p nil) ;; don't need to save dired buffers
  (find-alternate-file ".."))

(defun uki/dired-find-file ()
  "Use single instance of dired buffer when opening files."
  (interactive)
  (let ((file (dired-get-file-for-visit)))
    (if (file-directory-p file)
        (progn
          (set-buffer-modified-p nil) ;; don't need to save dired buffers
          (find-alternate-file file))
      (find-file file))))

(map! :after dired :map dired-mode-map
      [remap dired-find-file]    #'uki/dired-find-file
      [remap dired-up-directory] #'uki/dired-up-directory)
#+end_src
*** Permanent ~dired-hide-details-mode~                                 :bind:
#+begin_src emacs-lisp
(defun uki/permanent-dired-hide-details-mode-set (sym exp)
  "Restore saved mode state or set a new value."
  (custom-initialize-reset sym exp)
  (when (eq major-mode 'dired-mode) (dired-hide-details-mode exp))
  (if exp
      (add-hook! 'dired-mode-hook #'dired-hide-details-mode)
    (remove-hook! 'dired-mode-hook #'dired-hide-details-mode)))

(defcustom uki/permanent-dired-hide-details-mode-state nil
  "State of `dired-hide-details-mode' saved between restarts."
  :group 'user
  :type 'bool
  :initialize #'uki/permanent-dired-hide-details-mode-set)

(defun uki/permanent-dired-hide-details-mode-toggle ()
  "Toggles `dired-hide-details-mode' for current and future dired buffers."
  (interactive)
  (uki/permanent-dired-hide-details-mode-set
   'uki/permanent-dired-hide-details-mode-state
   (not uki/permanent-dired-hide-details-mode-state)))

(map! :after dired :map dired-mode-map
      (:localleader :desc "Hide-Details" "d" #'uki/permanent-dired-hide-details-mode-toggle)
      ([remap dired-hide-details-mode] #'uki/permanent-dired-hide-details-mode-toggle))
#+end_src
*** Run dired instead of listing directory
Why so complicated? [[https://nullprogram.com/blog/2019/12/10/#cl-first]]
#+begin_src emacs-lisp
(after! dired
  (defalias 'list-directory 'dired)
  (put 'list-directory 'byte-optimizer 'byte-compile-inline-expand))
#+end_src
** Org
*** Startup options                                                     :setq:
#+begin_src emacs-lisp
(setq! org-tags-column -80
       org-startup-indented t
       org-startup-folded t
       org-startup-truncated t
       org-startup-align-all-tables t)
#+end_src
*** My ~org-directory~                                                  :setq:
#+begin_src emacs-lisp
(setq! org-directory "~/org/")
#+end_src
*** Bind ~org-babel-tangle~ under :localleader                          :bind:
#+begin_src emacs-lisp
(map! :after org :map org-mode-map
      :localleader :desc "Tangle current file" "B" #'org-babel-tangle)
#+end_src
*** Follow link under point with <RET>                                  :setq:
#+begin_src emacs-lisp
(setq! org-return-follows-link t)
#+end_src
*** Publishing                                                          :setq:
#+begin_src emacs-lisp
(after! ox-publish
  (let* ((root-dir "/davs:ukaszg@fastmail.fm@myfiles.fastmail.com:/www/")
         (conf-dir (concat root-dir "config/"))
         (doompath (expand-file-name "hidden/doom.d/" uki/dotfiles-dir)))
    (setq! org-publish-project-alist
           `(("gruner.lu/kasz/config" :components ("config-static-resources" "config/index.html"))
             ("config-static-resources"
              :base-directory ,doompath
              :publishing-directory ,conf-dir
              :publishing-function org-publish-attachment
              :include ("favicon.ico" "config.css" "Droid_Sans_Mono.woff2")
              :exclude ".*")
             ("config/index.html"
              :base-directory ,doompath
              :include ("config.org")
              :exclude ".*"
              :publishing-directory ,conf-dir
              :html-postamble nil
              :publishing-function org-html-publish-to-html
              :keywords "config.org, doom-literate-config, init.el"
              :html-doctype "html5"
              :html-html5-fancy t)))))
#+end_src
*** Have export dialog open in place and without modeline              :popup:
#+begin_src emacs-lisp
(set-popup-rule! "^ ?\\*Org Export Dispatcher"
  :actions '(display-buffer-same-window)
  :modeline nil)
#+end_src
*** Have =org-src= buffers be managed by orgmode                  :setq:popup:
#+begin_src emacs-lisp :tangle no
(setq! org-src-window-setup 'current-window)

(set-popup-rule! "^\\*Org Src"
  :actions '(display-buffer-same-window)
  :modeline nil)
#+end_src
*** Enable eldoc-mode for src blocks                                    :hook:
#+begin_src emacs-lisp
(after! org
  (add-hook! 'org-mode-hook
    (defun uki/enable-eldoc-h ()
      "Setup `eldoc-documentation-functions'."
      (interactive)
      (add-hook 'eldoc-documentation-functions #'elisp-eldoc-funcall nil t)
      (add-hook 'eldoc-documentation-functions #'elisp-eldoc-var-docstring nil t)
      (eldoc-mode 1))))
#+end_src
*** Block templates
#+begin_src emacs-lisp
(after! org
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp")))
#+end_src
** Info
*** Automatically view '.info' files instead of editing them            :setq:
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist
             (cons "\\.[iI][nN][fF][oO]\\'"
                   (defun uki/reopen-file-in-info-mode-h ()
                     "Run this in an info viewer."
                     (interactive)
                     (let ((file-name (buffer-file-name)))
                       (kill-buffer)
                       (info file-name)))))
#+end_src
*** Display =*info*= buffers in same window                            :popup:
and disable the modeline.
#+begin_src emacs-lisp
(set-popup-rule! "^\\*info\\*$"
  :actions '(display-buffer-same-window)
  :modeline nil)
#+end_src
*** Left mouse button should follow links                               :bind:
#+begin_src emacs-lisp
(map! :after info :map Info-mode-map
      "<mouse-1>" #'Info-mouse-follow-nearest-node)
#+end_src
** Emacs-Lisp
*** Eldoc will show 1st line of function documentation       :advice:disabled:
#+begin_src emacs-lisp :tangle no
(declare-function helpful--docstring "helpful" (sym callable-p))
(declare-function elisp--docstring-first-line "elisp-mode" (doc))

(defadvice! uki/elisp-eldoc-add-fundoc-a (orig-fn sym &optional index prefix)
  "Add a 1st line of docstring to ElDoc's function information."
  :around #'elisp-eldoc-funcall
  (require 'helpful nil t)
  (let ((orig (funcall orig-fn sym index prefix))
        (doc  (elisp--docstring-first-line (helpful--docstring sym t))))
    (if (s-blank? doc)
        orig
       (concat orig " " (propertize doc 'face 'font-lock-doc-face)))))
#+end_src
*** [Flycheck] Disable elisp-checkdoc                              :hook:setq:
#+begin_src emacs-lisp
(add-hook! 'emacs-lisp-mode-hook
  (defun uki/flycheck-disable-checkdoc-h ()
    (cl-pushnew 'emacs-lisp-checkdoc flycheck-disabled-checkers)))
#+end_src
** Java
*** Set ~compile-command~ to maven                                 :hook:setq:
#+begin_src emacs-lisp
(add-hook! 'java-mode-hook
  (defun uki/set-mvn-cc ()
    (setq-local compile-command "mvn clean install -DskipTests")))
#+end_src
*** Use long lines                                                 :hook:setq:
#+begin_src emacs-lisp
(setq-hook! 'java-mode-hook
  fill-column 160)
#+end_src
*** Load formatter configuration if present
#+begin_src emacs-lisp
(after! lsp-java
  (let ((formatter (expand-file-name "~/.formatter.xml")))
    (if (file-exists-p formatter)
      (setq! lsp-java-format-enabled t
             lsp-java-format-settings-url formatter)
      (message "No formatter file present: %s" formatter))))
#+end_src
*** Always use code blocks
#+begin_src emacs-lisp
(after! lsp-java
  (setq! lsp-java-code-generation-use-blocks t))
#+end_src
** Compilation
*** Have <q> exit window                                           :hook:bind:
#+begin_src emacs-lisp
(add-hook! 'compilation-mode-hook #'uki/local-remap-q-kills-buffer-h)
#+end_src
** Special
*** Have <q> exit window                                           :hook:bind:
#+begin_src emacs-lisp
(add-hook! 'special-mode-hook #'uki/local-remap-q-kills-buffer-h)
#+end_src
** Comint
*** Have <q> exit window                                           :hook:bind:
#+begin_src emacs-lisp
(add-hook! 'comint-mode-hook #'uki/local-remap-q-kills-buffer-h)
#+end_src
* Auto tangle & compile
My =~/.doom.d/config.org= is a softlink, so depending on if I open a symlink or
concrete file, ~+literate-enable-recompile-h~ might not recognize it as literate config.

As a workaround I disable literate autotangle.
#+begin_src emacs-lisp
(after! org
  (remove-hook 'org-mode-hook #'+literate-enable-recompile-h))
#+end_src

And then add following at the end of =config.org= (this will also compile tangled files).
: # Local Variables:
: # eval: (add-hook! 'after-save-hook :local (progn (org-babel-tangle) (byte-recompile-directory doom-private-dir 0 t)))
: # End:
