#+TITLE: doom-literate-config
#+AUTHOR: Łukasz Gruner
#+EMAIL: lukasz@gruner.lu
#+DESCRIPTION: Doom Emacs literate config.
#+TAGS: package(p) advice(a) disabled(d) hook(h) bind(b) setq(s) popup(u) hack(H) defines(D) env(e)
#+PROPERTY: header-args:emacs-lisp :tangle ~/.doom.d/config.el :tangle-mode (identity #o400) :results silent :exports code :lexical yes :mkdirp no
#+TODO: TODO

* =*DOOM*=
** Add file headers
*** for =config.el=
#+begin_src emacs-lisp
;;; ~/.doom.d/config.el -*- lexical-binding: t; -*-
#+end_src
*** and =packages.el=
#+begin_src emacs-lisp :tangle ~/.doom.d/packages.el
;;; ~/.doom.d/packages.el -*- no-byte-compile: t; lexical-binding: t; -*-
#+end_src
*** load or create =custom.el=                                          :setq:
#+begin_src emacs-lisp
(setq! custom-file (expand-file-name "custom.el" doom-user-dir))
(if (file-exists-p custom-file)
    (load custom-file)
  (with-temp-file custom-file
    (insert ";;; ~/.doom.d/custom.el -*- no-byte-compile: t; lexical-binding: t; -*-\n")))
#+end_src
*** ask about unsaved customizations
#+begin_src emacs-lisp
(add-hook! 'kill-emacs-query-functions #'custom-save-all)
#+end_src
** =MODULES=
#+begin_src emacs-lisp :tangle ~/.doom.d/init.el
;;; ~/.doom.d/init.el -*- lexical-binding: t; -*-
(doom! :completion (company -tng -childframe) (vertico +icons)
       :ui         doom doom-dashboard hl-todo (modeline +light)
                   nav-flash ophints (treemacs +lsp)
                   (popup +all +defaults) vc-gutter vi-tilde-fringe
                   (window-select +numbers +switch-window)
       :editor     (evil +everywhere) file-templates fold
                   format snippets word-wrap
       :emacs      (dired +icons) electric (ibuffer +icons) undo vc
       :term       vterm
       :checkers   syntax
       :tools      (ansible +lsp) (debugger +lsp) (docker +lsp)
                   (eval +overlay) lookup (lsp +peek) magit make
       :os         tty
       :lang       (cc +lsp) data emacs-lisp (go +lsp)
                   (java +lsp) (javascript +lsp) (json -lsp)
                   lua markdown (org +hugo) (python +lsp) rest
                   (sh +fish -lsp) (web +lsp) (yaml -lsp)
       :config     literate (default +bindings +smartparens))
#+end_src
** My Library of useful stuff
*** Locally remap q to exit buffer                                      :defines:
Some modes don't require macros (like most RO buffers).
#+begin_src emacs-lisp
(defun uki/local-remap-q-kills-buffer-h ()
  (define-key evil-normal-state-local-map (kbd "q") #'quit-window)
  (define-key evil-visual-state-local-map (kbd "q") #'quit-window))
#+end_src
*** Install =simple-httpd=                                              :package:
#+begin_src emacs-lisp :tangle ~/.doom.d/packages.el
(package! simple-httpd)
#+end_src
*** Paste from WSL clipboard                                            :defines:
#+begin_src emacs-lisp
(defun uki/wsl-paste ()
  "Paste using Windows' clipboard."
  (interactive)
  (save-excursion
    (let ((text (shell-command-to-string "powershell.exe -command 'Get-Clipboard' | dos2unix")))
      ;; powershell adds an extra newline
      (setq text (substring text 0 -1))
      (insert-for-yank text))))
#+end_src
*** Set `$EMACS` variable for wsl wrapper script                        :env:
My script [[~/bin/wsl-context-do.fish]] expects EMACS env var to be present.
This allows to run only wsl versions of wrapped commands.
#+begin_src emacs-lisp
(setenv "EMACS" "yes" t)
#+end_src
*** Enable-mode-hook                                                    :defines:
:PROPERTIES:
:CREATED:  [2022-08-19 21:20]
:END:
#+begin_src emacs-lisp
(defmacro uki/enable-mode-hook (mode)
  "Create function that enables `MODE' for use in hooks."
  `(defun ,(make-symbol (concat "uki/enable-mode--" (symbol-name mode) "--h")) ()
       ,(format "Enables mode `%s'." mode)
       (,mode 1)))
#+end_src
* Minor-modes
** =Builtin= and one-liners
*** Personal info                                                       :setq:
#+begin_src emacs-lisp
(setq! user-full-name    "Łukasz Gruner"
       user-mail-address "lukasz@gruner.lu")
#+end_src
*** Set theme & font                                                    :setq:
~doom-zenburn-theme~ is installed by [[Modules configuration (init.el)][:ui doom]]
#+begin_src emacs-lisp
(let ((fn (cond
           ((find-font (font-spec :name "Terminus (TTF)")) "Terminus (TTF)")
           ((find-font (font-spec :name "Terminus")) "Terminus")
           (t "Monospace"))))
  (setq! doom-theme               'doom-zenburn
         doom-variable-pitch-font "Noto Sans:size=10:antialias=off"
         doom-font                (concat fn ":size=16:antialias=off")
         doom-big-font            (concat fn ":size=24:antialias=off")))
#+end_src
*** Start maximized                                                     :setq:
#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(fullscreen . maximized))
(add-to-list 'initial-frame-alist '(fullscreen . maximized))
#+end_src
*** Define const vars                                                   :defines:
#+begin_src emacs-lisp
(defconst uki/dotfiles-dir (expand-file-name "~/src/dot/") "Dotfiles repository root.")
(defconst uki/ellipsis "…" "Ellipsis.")
#+end_src
*** Make scripts executable on save                                     :hook:
#+begin_src emacs-lisp
(add-hook! 'after-save-hook #'executable-make-buffer-file-executable-if-script-p)
#+end_src
*** Enable gpg-sign for git commits                                     :setq:
#+begin_src emacs-lisp
(setq! epg-pinentry-mode 'loopback)
#+end_src
*** *<mouse-1>* should follow links                                     :setq:
#+begin_src emacs-lisp
(setq! mouse-1-click-follows-link t)
#+end_src
*** Enable ~+global-word-wrap-mode~
#+begin_src emacs-lisp
(add-hook! 'after-init-hook (uki/enable-mode-hook +global-word-wrap-mode))
#+end_src
*** Whitespace                                                          :hook:setq:
:PROPERTIES:
:CREATED:  [2022-07-05 wto 06:18]
:END:
#+begin_src emacs-lisp
(setq-hook! '(prog-mode-hook org-mode-hook)
  whitespace-style '(face trailing)
  show-trailing-whitespace t)
#+end_src
*** Enable native compilation of packages
:PROPERTIES:
:CREATED:  [2023-01-25 00:28]
:END:
#+begin_src emacs-lisp
(setq! package-native-compile t)
#+end_src
*** Start ~doom/open-scratch-buffer~ in last buffer's ~major-mode~
:PROPERTIES:
:CREATED:  [2023-01-27 17:20]
:END:
#+begin_src emacs-lisp
(unless noninteractive
  (setq! doom-scratch-initial-major-mode t))
#+end_src
** Consult
*** Buffer list filtering
#+begin_src emacs-lisp
(after! consult
  (setq! consult-buffer-filter `(,@consult-buffer-filter
                                 "\\`\\*scratch\\*\\'"
                                 "\\`\\*Messages\\*\\'"
                                 "\\`\\*helpful.*\\*\\'")))
#+end_src
** Hl-Todo
*** Highlight background                                                :setq:
#+begin_src emacs-lisp
(after! hl-todo
  (setq! hl-todo-color-background t))
#+end_src
** Evil
*** Always use windows <C-w> bindings                                   :setq:
#+begin_src emacs-lisp
(after! evil
  (setq! evil-want-C-w-in-emacs-state t))
#+end_src
*** Also use arrows for switching windows                               :bind:
#+begin_src emacs-lisp
(map! :after evil :map evil-window-map
      "<left>"  #'evil-window-left
      "<right>" #'evil-window-right
      "<up>"    #'evil-window-up
      "<down>"  #'evil-window-down)
#+end_src
*** Enable =vimish-fold-mode= globally                                  :hook:defines:
:PROPERTIES:
:CREATED:  [2023-01-20 16:33]
:END:
#+begin_src emacs-lisp
(add-hook! 'after-init-hook
  (uki/enable-mode-hook vimish-fold-global-mode))
#+end_src
** Flycheck
*** Always disable textlint                                             :hook:defines:
#+begin_src emacs-lisp
(after! flycheck
  (add-hook! '(org-mode-hook text-mode-hook prog-mode-hook)
    (defun uki/flycheck-disable-textlint-h ()
      (require 'flycheck)
      (cl-pushnew 'textlint flycheck-disabled-checkers))))
#+end_src
** LSP
*** Settings                                                            :setq:
#+begin_src emacs-lisp
(after! lsp
  (require 'lsp-ui)
  (setq! lsp-enable-symbol-highlighting nil
         lsp-ui-doc-enable t
         lsp-ui-doc-show-with-mouse nil
         lsp-ui-doc-show-with-cursor nil
         lsp-lens-enable t
         lsp-headerline-breadcrumb-enable nil
         lsp-ui-sideline-enable t
         lsp-ui-sidelin-show-code-actions t
         lsp-ui-sideline-show-hover t))
#+end_src
** Treemacs
:PROPERTIES:
:CREATED:  [2022-08-19 20:57]
:END:
*** Sync with LSP workspace                                             :hook:defines:
#+begin_src emacs-lisp
(after! treemacs
  (add-hook! 'treemacs-mode-hook
    (uki/enable-mode-hook lsp-treemacs-sync-mode)))
#+end_src
*** Enable follow mode                                                  :hook:defines:
#+begin_src emacs-lisp
(after! treemacs
  (add-hook! 'treemacs-mode-hook
    (uki/enable-mode-hook treemacs-follow-mode)))
#+end_src
*** Git mode extended
:PROPERTIES:
:CREATED:  [2023-01-27 18:59]
:END:
#+begin_src emacs-lisp
(setq! +treemacs-git-mode 'deferred)
#+end_src
** Keychain
:PROPERTIES:
:CREATED:  [2022-08-22 11:14]
:END:
*** Package                                                             :package:
:PROPERTIES:
:CREATED:  [2022-08-22 11:14]
:END:
#+begin_src emacs-lisp :tangle ~/.doom.d/packages.el
(package! keychain-environment)
#+end_src
*** Autostart                                                           :hook:
:PROPERTIES:
:CREATED:  [2022-08-22 11:17]
:END:
#+begin_src emacs-lisp
(add-hook! 'after-init-hook #'keychain-refresh-environment)
#+end_src
** Pinentry
:PROPERTIES:
:CREATED:  [2022-08-22 11:31]
:END:
*** Package                                                             :package:
:PROPERTIES:
:CREATED:  [2022-08-22 11:31]
:END:
#+begin_src emacs-lisp :tangle ~/.doom.d/packages.el
(package! pinentry)
#+end_src
*** Autostart
:PROPERTIES:
:CREATED:  [2022-08-22 11:40]
:END:
#+begin_src emacs-lisp
(add-hook! 'after-init-hook #'pinentry-start)
#+end_src
** Desktop
:PROPERTIES:
:CREATED:  [2023-01-25 18:29]
:END:
#+begin_src emacs-lisp
(add-hook! 'after-init-hook
  (uki/enable-mode-hook desktop-save-mode))
#+end_src
* Major-modes
** Magit
:PROPERTIES:
:CREATED:  [2023-01-04 09:16]
:END:
*** Enable Gravatars
:PROPERTIES:
:CREATED:  [2023-01-04 09:16]
:END:
#+begin_src emacs-lisp
(after! magit
  (setq magit-revision-show-gravatars '("^Author:     " . "^Commit:     ")))
#+end_src
** Messages
*** <q> emacs-buffer/window                                             :hook:
Messages buffer already exists so hook won't get called until it gets restarted. We need to modify bindings manually.
#+begin_src emacs-lisp
(add-hook! 'messages-buffer-mode-hook #'uki/local-remap-q-kills-buffer-h)
(with-current-buffer "*Messages*" (uki/local-remap-q-kills-buffer-h))
#+end_src
** Prog
*** <C-x =>/<SPC c => Align your code in a pretty way                   :bind:
#+begin_src emacs-lisp
(map! :map prog-mode-map
      "C-x =" #'align-regexp
      (:leader :prefix ("c" "+code")
        :desc "Align regexp" "=" #'align-regexp))
#+end_src
** Dired
*** Reuse current dired buffer when changing directories                :bind:
#+begin_src emacs-lisp
(defun uki/dired-up-directory ()
  "Use single instance of dired buffer when going up a directory."
  (interactive)
  (set-buffer-modified-p nil) ;; don't need to save dired buffers
  (find-alternate-file ".."))

(defun uki/dired-find-file ()
  "Use single instance of dired buffer when opening files."
  (interactive)
  (let ((file (dired-get-file-for-visit)))
    (if (file-directory-p file)
        (progn
          (set-buffer-modified-p nil) ;; don't need to save dired buffers
          (find-alternate-file file))
      (find-file file))))

(map! :after dired :map dired-mode-map
      [remap dired-find-file]    #'uki/dired-find-file
      [remap dired-up-directory] #'uki/dired-up-directory)
#+end_src
*** Permanent ~dired-hide-details-mode~                                 :bind:
press <space m d> to toggle
#+begin_src emacs-lisp
(defun uki/permanent-dired-hide-details-mode-set (sym exp)
  "Restore saved mode state or set a new value."
  (custom-initialize-reset sym exp)
  (when (eq major-mode 'dired-mode) (dired-hide-details-mode exp))
  (if exp
      (add-hook! 'dired-mode-hook #'dired-hide-details-mode)
    (remove-hook! 'dired-mode-hook #'dired-hide-details-mode)))

(defcustom uki/permanent-dired-hide-details-mode-state nil
  "State of `dired-hide-details-mode' saved between restarts."
  :group 'user
  :type 'bool
  :initialize #'uki/permanent-dired-hide-details-mode-set)

(defun uki/permanent-dired-hide-details-mode-toggle ()
  "Toggles `dired-hide-details-mode' for current and future dired buffers."
  (interactive)
  (uki/permanent-dired-hide-details-mode-set
   'uki/permanent-dired-hide-details-mode-state
   (not uki/permanent-dired-hide-details-mode-state)))

(map! :after dired :map dired-mode-map
      (:localleader :desc "dired-hide-details (toggle)" "d" #'uki/permanent-dired-hide-details-mode-toggle)
      ([remap dired-hide-details-mode] #'uki/permanent-dired-hide-details-mode-toggle))
#+end_src
*** Run dired instead of listing directory
Why so complicated? [[https://nullprogram.com/blog/2019/12/10/#cl-first]]
#+begin_src emacs-lisp
(after! dired
  (defalias 'list-directory 'dired)
  (put 'list-directory 'byte-optimizer 'byte-compile-inline-expand))
#+end_src
** Org
*** Startup options                                                     :setq:
#+begin_src emacs-lisp
(after! org
  (setq! org-tags-column 74
         org-startup-indented t
         org-startup-folded t
         org-startup-truncated t
         org-startup-align-all-tables t))
#+end_src
*** My ~org-directory~                                                  :setq:
#+begin_src emacs-lisp
(setq! org-directory (file-truename "~/mnt/OneDrive/doc/"))
#+end_src
*** Bind ~org-babel-tangle~ under :localleader                          :bind:
#+begin_src emacs-lisp
(map! :after org :map org-mode-map
      :localleader :desc "Tangle current file" "B" #'org-babel-tangle)
#+end_src
*** Follow link under point with <RET>                                  :setq:
#+begin_src emacs-lisp
(after! org
  (setq! org-return-follows-link t))
#+end_src
*** Have export dialog open in place and without modeline               :popup:
#+begin_src emacs-lisp
(after! org
  (set-popup-rule! "^ ?\\*Org Export Dispatcher"
    :actions '(display-buffer-same-window)
    :side nil
    :width nil
    :height nil
    :size nil
    :quit nil
    :select t
    :modeline nil))
#+end_src
*** Have =org-src= buffers be managed by orgmode                        :setq:popup:
#+begin_src emacs-lisp
(after! org
  (setq! org-src-window-setup 'current-window)

  (set-popup-rule! "^\\*Org Src" :ignore t))
#+end_src
*** Enable eldoc-mode for src blocks                                    :hook:
#+begin_src emacs-lisp
(after! org
  (add-hook! 'org-mode-hook
    (defun uki/enable-eldoc-h ()
      "Setup `eldoc-documentation-functions' for elisp."
      (interactive)
      (add-hook 'eldoc-documentation-functions #'elisp-eldoc-funcall nil t)
      (add-hook 'eldoc-documentation-functions #'elisp-eldoc-var-docstring nil t)
      (eldoc-mode 1))))
#+end_src
*** Add Elisp src block template                                        :setq:
#+begin_src emacs-lisp
(after! org
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp")))
#+end_src
*** Add timestamps to new headings                                      :hook:
#+begin_src emacs-lisp
(after! org
  (add-hook! 'org-insert-heading-hook
    (defun uki/org-set-created-time ()
      "Sets CREATED property on the entry giving the creation time.
If the property already exists, it will not be modified."
      (interactive)
      (save-excursion
        (unless (org-entry-get (point) "CREATED" nil)
          (org-set-property "CREATED" (format-time-string "[%Y-%m-%d %H:%M]")))))))
#+end_src
** Info
*** Automatically view '.info' files instead of editing them            :setq:
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist
             (cons "\\.[iI][nN][fF][oO]\\'"
                   (defun uki/reopen-file-in-info-mode ()
                     "Re-run this in an info viewer."
                     (interactive)
                     (let ((file-name (buffer-file-name)))
                       (kill-buffer)
                       (info file-name)))))
#+end_src
*** Display =*info*= buffers in same window                            :popup:
#+begin_src emacs-lisp
(set-popup-rule! "^\\*info\\*$"
  :actions '(display-buffer-same-window)
  :modeline t)
#+end_src
*** Left mouse button should follow links                               :bind:
#+begin_src emacs-lisp
(map! :after info :map Info-mode-map
      "<mouse-1>" #'Info-mouse-follow-nearest-node)
#+end_src
** Emacs-Lisp
*** [Flycheck] Disable elisp-checkdoc                                   :hook:setq:
#+begin_src emacs-lisp
(add-hook! 'emacs-lisp-mode-hook
  (defun uki/flycheck-disable-checkdoc-h ()
    (require 'flycheck)
    (cl-pushnew 'emacs-lisp-checkdoc flycheck-disabled-checkers)))
#+end_src
** Java
*** Use long lines                                                      :hook:setq:
#+begin_src emacs-lisp
(setq-hook! 'java-mode-hook
  fill-column 160)
#+end_src
*** Load formatter configuration if present
#+begin_src emacs-lisp
(after! lsp-java
  (let ((formatter (expand-file-name "~/.formatter.xml")))
    (if (file-exists-p formatter)
        (setq! lsp-java-format-enabled t
               lsp-java-format-settings-profile "default"
               lsp-java-format-settings-url formatter)
      (message "No formatter file present: %s" formatter))))
#+end_src
*** Always use code blocks
#+begin_src emacs-lisp
(after! lsp-java
  (setq! lsp-java-code-generation-use-blocks t))
#+end_src
*** Settings
:PROPERTIES:
:CREATED:  [2022-08-19 20:19]
:END:
#+begin_src emacs-lisp
(after! lsp-java
  (setq! lsp-java-java-path "/usr/bin/java"
         lsp-java-dependency-package-representation "hierarchical"
         lsp-java-maven-download-sources t
         lsp-java-references-code-lens-enabled t
         lsp-java-configuration-maven-user-settings (expand-file-name "~/.m2/settings.xml")
         lsp-java-save-actions-organize-imports t))
#+end_src
** Compilation
*** Have <q> exit window                                           :hook:bind:
#+begin_src emacs-lisp
(add-hook! 'compilation-mode-hook #'uki/local-remap-q-kills-buffer-h)
#+end_src
** Special
*** Have <q> exit window                                           :hook:bind:
#+begin_src emacs-lisp
(add-hook! 'special-mode-hook #'uki/local-remap-q-kills-buffer-h)
#+end_src
** Comint
*** Have <q> exit window                                           :hook:bind:
#+begin_src emacs-lisp
(add-hook! 'comint-mode-hook #'uki/local-remap-q-kills-buffer-h)
#+end_src
** Powershell
:PROPERTIES:
:CREATED:  [2023-01-25 19:45]
:END:
*** TODO Set exe location
TODO: fix: M-x lsp-install-server
:PROPERTIES:
:CREATED:  [2023-01-25 19:45]
:END:
#+begin_src emacs-lisp
(after! lsp-pwsh
  (setq! lsp-pwsh-exe (executable-find "powershell.exe")))
#+end_src
** Vterm
:PROPERTIES:
:CREATED:  [2023-01-25 20:39]
:END:
*** Disable solaire mode
When enabled, vterm background is too dark to see dark-blue (filename) color.
:PROPERTIES:
:CREATED:  [2023-01-25 20:39]
:END:
#+begin_src emacs-lisp
(add-hook! 'vterm-mode-hook #'turn-off-solaire-mode)
#+end_src
* Auto tangle & compile
My =~/.doom.d/config.org= is a softlink, so depending on if I open a symlink or
concrete file, ~+literate-enable-recompile-h~ might not recognize it as literate config.

As a workaround I disable literate autotangle.
#+begin_src emacs-lisp
(after! org
  (remove-hook 'org-mode-hook #'+literate-enable-recompile-h))
#+end_src

And then add following at the end of =config.org= (this will also compile tangled files).
: # Local Variables:
: # eval: (add-hook! 'after-save-hook :local (progn (org-babel-tangle) (byte-recompile-directory doom-user-dir 0 t)))
: # End:
